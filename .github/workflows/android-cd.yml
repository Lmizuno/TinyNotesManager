name: Android CD

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build_and_release:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for version bumping
      
      - name: Load config
        id: config
        run: |
          JAVA_VERSION=$(yq '.java.version' .github/config.yml)
          JAVA_DISTRIBUTION=$(yq '.java.distribution' .github/config.yml)
          echo "java-version=$JAVA_VERSION" >> $GITHUB_OUTPUT
          echo "java-distribution=$JAVA_DISTRIBUTION" >> $GITHUB_OUTPUT
      
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ steps.config.outputs.java-version }}
          distribution: ${{ steps.config.outputs.java-distribution }}
          cache: gradle
      
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Set up Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
      
      # Bump version based on input or automatically for master
      - name: Bump version
        id: bump_version
        run: |
          # Extract current version from build.gradle.kts
          CURRENT_VERSION=$(grep -o 'versionName "[^"]*"' app/build.gradle.kts | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"
          
          # Determine bump type
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          else
            BUMP_TYPE="patch"  # Default to patch for auto-releases
          fi
          
          # Parse version components
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          # Bump version according to type
          if [ "$BUMP_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update version in build.gradle.kts
          sed -i "s/versionName \"[^\"]*\"/versionName \"$NEW_VERSION\"/" app/build.gradle.kts
          
          # Also increment versionCode
          CURRENT_CODE=$(grep -o 'versionCode [0-9]*' app/build.gradle.kts | awk '{print $2}')
          NEW_CODE=$((CURRENT_CODE + 1))
          sed -i "s/versionCode [0-9]*/versionCode $NEW_CODE/" app/build.gradle.kts
      
      # Run tests to ensure everything works
      - name: Run Tests
        run: ./gradlew testDebugUnitTest
      
      # Build release APK
      - name: Build Release APK
        run: ./gradlew assembleRelease
      
      # Sign the APK
      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      
      # Commit version bump
      - name: Commit version bump
        run: |
          git add app/build.gradle.kts
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
          git tag -a "v${{ steps.bump_version.outputs.new_version }}" -m "Version ${{ steps.bump_version.outputs.new_version }}"
          git push
          git push --tags
      
      # Upload to Firebase App Distribution
      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_CREDENTIALS }}
          groups: testers
          file: ${{steps.sign_app.outputs.signedReleaseFile}}
          releaseNotes: |
            Version ${{ steps.bump_version.outputs.new_version }}
            
            Changes in this release:
            ${{ github.event.head_commit.message }}
      
      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          name: Release v${{ steps.bump_version.outputs.new_version }}
          files: ${{steps.sign_app.outputs.signedReleaseFile}}
          draft: false
          prerelease: false
          generate_release_notes: true
